AWSTemplateFormatVersion: 2010-09-09
Description: AWS ECS Fargate cluster.
Parameters: 
  NetworkStackName:
    Type: String
    Description: "The name of the network stack"
  Environment:
    Type: String
    Description: "The deployment environment: dev, prod"
Resources: 
  ECSCluster:
    Type: AWS::ECS::Cluster
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["", ["ECSLogGroup-", !Ref Environment]]
      RetentionInDays: "1"
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS Fargate containers
      VpcId: 
        Fn::ImportValue:
          !Join [':', [!Ref 'NetworkStackName', 'VPCId']]
  ContainerSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'ContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'ContainerSecurityGroup'
  IngressFromLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the ALB
      GroupId: !Ref ContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref LoadBalancerSG
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'ecs:DescribeServices'
              - 'ecs:UpdateService'
            Resource: '*'
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - 
          Fn::ImportValue:
            !Join [':', [!Ref 'NetworkStackName', 'PublicSubnetOne']]
        - 
          Fn::ImportValue:
            !Join [':', [!Ref 'NetworkStackName', 'PublicSubnetTwo']]
      SecurityGroups: [!Ref 'LoadBalancerSG']
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the load balancer
      VpcId: 
        Fn::ImportValue:
          !Join [':', [!Ref 'NetworkStackName', 'VPCId']]
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]
  AutoscalingRole:
    Description: The ARN of the role used for autoscaling
    Value: !GetAtt 'AutoscalingRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'AutoscalingRole' ] ]
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSRole' ] ]
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSTaskExecutionRole' ] ]
  CloudwatchLogsGroup:
    Description: Cloudwatch log group used to group the log stream in the same cluster
    Value: !Ref 'CloudwatchLogsGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'CloudwatchLogsGroup' ] ]
  ContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'ContainerSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ContainerSecurityGroup' ] ]
  LoadBalancer:
    Description: LoadBalancer
    Value: !Ref 'LoadBalancer'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'LoadBalancer' ] ]
  LoadBalancerCanonicalHostedZoneID:
    Description: LoadBalancer Canonical Hosted Zone ID
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'LoadBalancerCanonicalHostedZoneID' ] ]
  LoadBalancerDNSName:
    Description: LoadBalancer DNS Name
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'LoadBalancerDNSName' ] ]
